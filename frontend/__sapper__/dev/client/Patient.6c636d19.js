import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, b as validate_slots, g as goto, a as stores$1, e as element, t as text, f as space, h as claim_element, j as children, k as claim_text, l as detach_dev, m as claim_space, o as attr_dev, n as add_location, q as insert_dev, r as append_dev, w as listen_dev, x as set_data_dev, A as noop } from './client.12c0cabd.js';

/* src\components\Patient.svelte generated by Svelte v3.24.0 */
const file = "src\\components\\Patient.svelte";

function create_fragment(ctx) {
	let div;
	let table;
	let tr0;
	let td0;
	let t0;
	let t1;
	let td1;
	let t2_value = /*patient*/ ctx[0].name + "";
	let t2;
	let t3;
	let tr1;
	let td2;
	let t4;
	let t5;
	let td3;
	let t6_value = /*patient*/ ctx[0].location + "";
	let t6;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			table = element("table");
			tr0 = element("tr");
			td0 = element("td");
			t0 = text("Name:");
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			tr1 = element("tr");
			td2 = element("td");
			t4 = text("Location:");
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			table = claim_element(div_nodes, "TABLE", {});
			var table_nodes = children(table);
			tr0 = claim_element(table_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			td0 = claim_element(tr0_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, "Name:");
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr0_nodes);
			td1 = claim_element(tr0_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t3 = claim_space(table_nodes);
			tr1 = claim_element(table_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td2 = claim_element(tr1_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, "Location:");
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr1_nodes);
			td3 = claim_element(tr1_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td0, "class", "svelte-jq1slh");
			add_location(td0, file, 30, 6, 461);
			attr_dev(td1, "class", "svelte-jq1slh");
			add_location(td1, file, 31, 6, 482);
			add_location(tr0, file, 29, 4, 450);
			attr_dev(td2, "class", "svelte-jq1slh");
			add_location(td2, file, 34, 6, 531);
			attr_dev(td3, "class", "svelte-jq1slh");
			add_location(td3, file, 35, 6, 556);
			add_location(tr1, file, 33, 4, 520);
			add_location(table, file, 28, 2, 438);
			attr_dev(div, "class", "svelte-jq1slh");
			add_location(div, file, 27, 0, 389);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, table);
			append_dev(table, tr0);
			append_dev(tr0, td0);
			append_dev(td0, t0);
			append_dev(tr0, t1);
			append_dev(tr0, td1);
			append_dev(td1, t2);
			append_dev(table, t3);
			append_dev(table, tr1);
			append_dev(tr1, td2);
			append_dev(td2, t4);
			append_dev(tr1, t5);
			append_dev(tr1, td3);
			append_dev(td3, t6);

			if (!mounted) {
				dispose = listen_dev(div, "click", /*onClick*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*patient*/ 1 && t2_value !== (t2_value = /*patient*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*patient*/ 1 && t6_value !== (t6_value = /*patient*/ ctx[0].location + "")) set_data_dev(t6, t6_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { patient } = $$props;

	function onClick() {
		goto("patient?patientid=" + patient.patientid);
	}

	const writable_props = ["patient"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Patient> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Patient", $$slots, []);

	$$self.$set = $$props => {
		if ("patient" in $$props) $$invalidate(0, patient = $$props.patient);
	};

	$$self.$capture_state = () => ({ goto, stores: stores$1, patient, onClick });

	$$self.$inject_state = $$props => {
		if ("patient" in $$props) $$invalidate(0, patient = $$props.patient);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [patient, onClick];
}

class Patient extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { patient: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Patient",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*patient*/ ctx[0] === undefined && !("patient" in props)) {
			console.warn("<Patient> was created without expected prop 'patient'");
		}
	}

	get patient() {
		throw new Error("<Patient>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set patient(value) {
		throw new Error("<Patient>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Patient as P };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aWVudC42YzYzNmQxOS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUGF0aWVudC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgZ290bywgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnXG5cbiAgZXhwb3J0IGxldCBwYXRpZW50XG5cbiAgZnVuY3Rpb24gb25DbGljaygpIHtcblx0XHRnb3RvKCdwYXRpZW50P3BhdGllbnRpZD0nICsgcGF0aWVudC5wYXRpZW50aWQpXG5cdH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGRpdiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYXF1YW1hcmluZTtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgbWFyZ2luOiA1cHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG4gIHRkIHtcbiAgICBtYXJnaW46IDVweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gIH1cbiAgLmFjdGl2ZSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmM2UwMDtcblx0XHRjb2xvcjogd2hpdGU7XG5cdH1cbjwvc3R5bGU+XG5cbjxkaXYgb246Y2xpY2s9e29uQ2xpY2t9IGxldDpob3ZlcmluZz17YWN0aXZlfT5cbiAgPHRhYmxlPlxuICAgIDx0cj5cbiAgICAgIDx0ZD5OYW1lOjwvdGQ+XG4gICAgICA8dGQ+e3BhdGllbnQubmFtZX08L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgPHRkPkxvY2F0aW9uOjwvdGQ+XG4gICAgICA8dGQ+e3BhdGllbnQubG9jYXRpb259PC90ZD5cbiAgICA8L3RyPlxuICA8L3RhYmxlPlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs0QkErQlcsR0FBTyxJQUFDLElBQUk7Ozs7Ozs7OzRCQUlaLEdBQU8sSUFBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21EQVJaLEdBQU87Ozs7O3FFQUlYLEdBQU8sSUFBQyxJQUFJO3FFQUlaLEdBQU8sSUFBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWhDZCxPQUFPOztVQUVULE9BQU87RUFDaEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
