main.svelte-1uhnsl8{position:relative;max-width:56em;background-color:white;padding:2em;margin:0 auto;box-sizing:border-box}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
.center.svelte-rzqpb7{margin:auto;width:100%;display:flex;justify-content:center}
nav.svelte-dwkzdf{border-bottom:1px solid rgba(255,62,0,0.1);font-weight:300;padding:0 1em;display:flex;justify-content:space-between}ul.svelte-dwkzdf{margin:0;padding:0}ul.svelte-dwkzdf::after{content:'';display:block;clear:both}li.svelte-dwkzdf{display:block;float:left}[aria-current].svelte-dwkzdf{position:relative;display:inline-block}[aria-current].svelte-dwkzdf::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:rgb(255,62,0);display:block;bottom:-1px}a.svelte-dwkzdf{text-decoration:none;padding:1em 0.5em;display:block}
div.svelte-jq1slh{background-color:aquamarine;padding:5px;margin:5px;cursor:pointer}td.svelte-jq1slh{margin:5px;padding:5px}
.center.svelte-lvl36j.svelte-lvl36j{margin:auto;width:100%;display:flex;justify-content:center}.table tr.svelte-lvl36j td.svelte-lvl36j{text-align:right}
div.svelte-1od0orj{background-color:rgb(251, 252, 206);padding:5px;margin:5px}table.svelte-1od0orj{width:100%}td.svelte-1od0orj{white-space:pre-wrap;vertical-align:text-top}
div.svelte-vjzopz{background-color:rgb(241, 241, 240);padding:5px;margin:5px}textarea.svelte-vjzopz{width:95%;height:200px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4xMDI2MjEyNDAzLmNzcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX2xheW91dC5zdmVsdGUiLCIuLi8uLi8uLi9fZXJyb3Iuc3ZlbHRlIiwiLi4vLi4vLi4vaW5kZXguc3ZlbHRlIiwiLi4vLi4vLi4vTmF2LnN2ZWx0ZSIsIi4uLy4uLy4uL1BhdGllbnQuc3ZlbHRlIiwiLi4vLi4vLi4vTG9naW4uc3ZlbHRlIiwiLi4vLi4vLi4vSGVhbHRoTm90ZVZpZXcuc3ZlbHRlIiwiLi4vLi4vLi4vSGVhbHRoTm90ZUVkaXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCBOYXYgZnJvbSAnLi4vY29tcG9uZW50cy9OYXYuc3ZlbHRlJztcblxuXHRleHBvcnQgbGV0IHNlZ21lbnQ7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXHRtYWluIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0bWF4LXdpZHRoOiA1NmVtO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXHRcdHBhZGRpbmc6IDJlbTtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHR9XG48L3N0eWxlPlxuXG48TmF2IHtzZWdtZW50fS8+XG5cbjxtYWluPlxuXHQ8c2xvdD48L3Nsb3Q+XG48L21haW4+IiwiPHNjcmlwdD5cblx0ZXhwb3J0IGxldCBzdGF0dXM7XG5cdGV4cG9ydCBsZXQgZXJyb3I7XG5cblx0Y29uc3QgZGV2ID0gXCJkZXZlbG9wbWVudFwiID09PSAnZGV2ZWxvcG1lbnQnO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblx0aDEsIHAge1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHR9XG5cblx0aDEge1xuXHRcdGZvbnQtc2l6ZTogMi44ZW07XG5cdFx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xuXHR9XG5cblx0cCB7XG5cdFx0bWFyZ2luOiAxZW0gYXV0bztcblx0fVxuXG5cdEBtZWRpYSAobWluLXdpZHRoOiA0ODBweCkge1xuXHRcdGgxIHtcblx0XHRcdGZvbnQtc2l6ZTogNGVtO1xuXHRcdH1cblx0fVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+e3N0YXR1c308L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPntzdGF0dXN9PC9oMT5cblxuPHA+e2Vycm9yLm1lc3NhZ2V9PC9wPlxuXG57I2lmIGRldiAmJiBlcnJvci5zdGFja31cblx0PHByZT57ZXJyb3Iuc3RhY2t9PC9wcmU+XG57L2lmfVxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgZ290bywgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnXG4gIGltcG9ydCBMb2dpbiBmcm9tICcuLi9jb21wb25lbnRzL0xvZ2luLnN2ZWx0ZSdcbiAgXG4gIGNvbnN0IHsgc2Vzc2lvbiB9ID0gc3RvcmVzKClcbiAgbGV0IGVycm9yXG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5jZW50ZXIge1xuICAgIG1hcmdpbjogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5QYXRpZW50IE1hbmFnZW1lbnQgU3lzdGVtPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxkaXYgY2xhc3M9Y2VudGVyPlxueyNpZiAkc2Vzc2lvbiAmJiAhJHNlc3Npb24ubG9hZGluZ31cbiAgeyNpZiAkc2Vzc2lvbi5hdXRoZW50aWNhdGVkfVxuICAgIDxwPldlbGNvbWUsIHskc2Vzc2lvbi5wcm9maWxlLm5hbWV9PC9wPlxuICB7OmVsc2V9XG4gICAgPExvZ2luLz5cbiAgey9pZn1cbnsvaWZ9XG57I2lmIGVycm9yfVxuICB7ZXJyb3J9XG57L2lmfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcbiAgaW1wb3J0IHsgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnXG5cbiAgY29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKVxuXHRleHBvcnQgbGV0IHNlZ21lbnRcblxuICAvLyBjaGVjayBmb3IgdmFsaWQgc2Vzc2lvbiBvbiBwYWdlIGxvYWRcbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNlc3Npb24gJiYgc2Vzc2lvbi5hdXRoZW50aWNhdGVkKSByZXR1cm47IC8vIGFscmVhZHkgaGF2ZSB2YWxpZCBzZXNzaW9uXG4gICAgc2Vzc2lvbi51cGRhdGUoKCkgPT4ge1xuICAgICAgcmV0dXJuIHsgbG9hZGluZzogdHJ1ZSB9XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHZhbGlkYXRlIHNlc3Npb24tdG9rZW4gYWdhaW5zdCBzZXJ2ZXJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvc2Vzc2lvbicsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIC8vIHVzZXIgcHJvZmlsZSBpcyByZXR1cm5lZCBvbiBzdWNjZXNzXG4gICAgICAgIGxldCBwcm9maWxlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICAgIHNlc3Npb24udXBkYXRlKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRlZDogISFwcm9maWxlLFxuICAgICAgICAgICAgcHJvZmlsZSxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBlcnJvciB2YWxpZGF0aW5nIHNlc3Npb25cbiAgICAgICAgc2Vzc2lvbi51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHByb2ZpbGU6IG51bGwsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7ICAgICAgXG4gICAgICB9ICAgICAgXG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycikgLy8gY29ubmVjdGlvIGVycm9yXG4gICAgfVxuICB9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdG5hdiB7XG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU1LDYyLDAsMC4xKTtcblx0XHRmb250LXdlaWdodDogMzAwO1xuXHRcdHBhZGRpbmc6IDAgMWVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHR9XG5cblx0dWwge1xuXHRcdG1hcmdpbjogMDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cblx0LyogY2xlYXJmaXggKi9cblx0dWw6OmFmdGVyIHtcblx0XHRjb250ZW50OiAnJztcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRjbGVhcjogYm90aDtcblx0fVxuXG5cdGxpIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmbG9hdDogbGVmdDtcblx0fVxuXG5cdFthcmlhLWN1cnJlbnRdIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHR9XG5cblx0W2FyaWEtY3VycmVudF06OmFmdGVyIHtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0d2lkdGg6IGNhbGMoMTAwJSAtIDFlbSk7XG5cdFx0aGVpZ2h0OiAycHg7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSw2MiwwKTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRib3R0b206IC0xcHg7XG5cdH1cblxuXHRhIHtcblx0XHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cdFx0cGFkZGluZzogMWVtIDAuNWVtO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHR9XG48L3N0eWxlPlxuXG48bmF2PlxuXHQ8dWw+XG5cdFx0PGxpPjxhIGFyaWEtY3VycmVudD1cIntzZWdtZW50ID09PSB1bmRlZmluZWQgPyAncGFnZScgOiB1bmRlZmluZWR9XCIgaHJlZj1cIi5cIj5ob21lPC9hPjwvbGk+XG5cdFx0eyNpZiAkc2Vzc2lvbiAmJiAkc2Vzc2lvbi5hdXRoZW50aWNhdGVkfVxuXHRcdFx0eyNpZiAkc2Vzc2lvbi5wcm9maWxlLnJvbGVzLmluY2x1ZGVzKCdudXJzZScpfVxuXHRcdFx0XHQ8bGk+PGEgYXJpYS1jdXJyZW50PSd7c2VnbWVudCA9PT0gXCJwYXRpZW50c1wiID8gXCJwYWdlXCIgOiB1bmRlZmluZWR9JyBocmVmPSdwYXRpZW50cyc+cGF0aWVudHM8L2E+PC9saT5cblx0XHRcdFx0eyNpZiBzZWdtZW50ID09PSBcInBhdGllbnRcIn1cblx0XHRcdFx0XHQ8bGk+PGEgYXJpYS1jdXJyZW50PSd7c2VnbWVudCA9PT0gXCJwYXRpZW50XCIgPyBcInBhZ2VcIiA6IHVuZGVmaW5lZH0nIGhyZWY9J3BhdGllbnQnPnBhdGllbnQ8L2E+PC9saT5cblx0XHRcdFx0ey9pZn1cblx0XHRcdHsvaWZ9XG5cdFx0ey9pZn1cbiAgPC91bD5cbiAgPHVsPlxuXHR7I2lmICRzZXNzaW9uICYmICRzZXNzaW9uLmF1dGhlbnRpY2F0ZWR9XG5cdFx0eyNpZiAkc2Vzc2lvbi5wcm9maWxlLnJvbGVzLmluY2x1ZGVzKCdhZG1pbicpfVxuXHRcdFx0PGxpPjxhIGFyaWEtY3VycmVudD0ne3NlZ21lbnQgPT09IFwiYWRtaW5cIiA/IFwicGFnZVwiIDogdW5kZWZpbmVkfScgaHJlZj0nYWRtaW4nPmFkbWluPC9hPjwvbGk+XG5cdFx0ey9pZn1cblx0XHQ8IS0tIDxsaT48YSBhcmlhLWN1cnJlbnQ9J3tzZWdtZW50ID09PSBcInByb2ZpbGVcIiA/IFwicGFnZVwiIDogdW5kZWZpbmVkfScgaHJlZj0ncHJvZmlsZSc+cHJvZmlsZTwvYT48L2xpPiAtLT5cblx0XHQ8bGk+PGEgaHJlZj0nbG9nb3V0Jz5sb2cgb3V0PC9hPjwvbGk+XG4gICAgey9pZn1cbjwvdWw+XG48L25hdj5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGdvdG8sIHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJ1xuXG4gIGV4cG9ydCBsZXQgcGF0aWVudFxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG5cdFx0Z290bygncGF0aWVudD9wYXRpZW50aWQ9JyArIHBhdGllbnQucGF0aWVudGlkKVxuXHR9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICBkaXYge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGFxdWFtYXJpbmU7XG4gICAgcGFkZGluZzogNXB4O1xuICAgIG1hcmdpbjogNXB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuICB0ZCB7XG4gICAgbWFyZ2luOiA1cHg7XG4gICAgcGFkZGluZzogNXB4O1xuICB9XG4gIC5hY3RpdmUge1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICNmZjNlMDA7XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHR9XG48L3N0eWxlPlxuXG48ZGl2IG9uOmNsaWNrPXtvbkNsaWNrfSBsZXQ6aG92ZXJpbmc9e2FjdGl2ZX0+XG4gIDx0YWJsZT5cbiAgICA8dHI+XG4gICAgICA8dGQ+TmFtZTo8L3RkPlxuICAgICAgPHRkPntwYXRpZW50Lm5hbWV9PC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgIDx0ZD5Mb2NhdGlvbjo8L3RkPlxuICAgICAgPHRkPntwYXRpZW50LmxvY2F0aW9ufTwvdGQ+XG4gICAgPC90cj5cbiAgPC90YWJsZT5cbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgZ290bywgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnXG4gIGltcG9ydCB7IERvTG9naW4sIERvUmVnaXN0ZXIgfSBmcm9tICcuLi9zZXNzaW9uLmpzJ1xuICBcbiAgY29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKVxuICBsZXQgbmFtZSA9ICcnXG4gIGxldCB1c2VybmFtZSA9ICdudXJzZTEnXG4gIGxldCBwYXNzd29yZCA9ICdwYXNzd29yZCdcbiAgbGV0IHZlcmlmeSA9ICcnXG4gIGxldCByZWdpc3RlciA9IGZhbHNlXG4gIGxldCBlcnJvclxuXG4gIGFzeW5jIGZ1bmN0aW9uIG9uQ2xpY2sgKCkge1xuICAgIGlmIChyZWdpc3Rlcikge1xuICAgICAgYnRuUmVnaXN0ZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnRuTG9naW4oKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBidG5Mb2dpbigpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IERvTG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gYnRuUmVnaXN0ZXIoKSB7XG4gICAgaWYgKCF2ZXJpZnlQYXNzd29yZCgpKSByZXR1cm47XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBEb1JlZ2lzdGVyKHtcbiAgICAgIG5hbWUsXG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgcm9sZXM6IFtcIm51cnNlXCJdXG4gICAgfSk7XG4gICAgcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NSZXNwb25zZShyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgcHJvZmlsZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHNlc3Npb24udXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6ICEhcHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgaWYgKCFwcm9maWxlKVxuICAgICAgICBlcnJvciA9ICdsb2dpbiBlcnJvcidcbiAgICAgIGlmIChwcm9maWxlLnJvbGVzLmluY2x1ZGVzKCdudXJzZScpKVxuICAgICAgICBnb3RvKCdwYXRpZW50cycpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlc3Npb24udXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgaWYgKHJlc3BvbnNlLnRleHQpXG4gICAgICAgIGVycm9yID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpXG4gICAgICBlbHNlXG4gICAgICAgIGVycm9yID0gXCJzZXJ2ZXIgZXJyb3JcIlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZlcmlmeVBhc3N3b3JkKCkge1xuICAgIGlmIChuYW1lLmxlbmd0aCA9PSAwKSB7XG4gICAgICBlcnJvciA9IFwibmFtZSBjYW5ub3QgYmUgZW1wdHlcIlxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCA4KSB7XG4gICAgICBlcnJvciA9IFwicGFzc3dvcmQgbXVzdCBiZSBhdGxlYXN0IDggY2hhcmFjdGVyc1wiXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKHZlcmlmeSAhPSBwYXNzd29yZCkge1xuICAgICAgZXJyb3IgPSBcInBhc3N3b3JkcyBkb24ndCBtYXRjaFwiXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgZXJyb3IgPSBudWxsXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLmNlbnRlciB7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cblxuICAudGFibGUgdHIgdGQge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICB9ICBcbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9Y2VudGVyPlxuPGZvcm0+XG57I2lmICRzZXNzaW9uICYmICEkc2Vzc2lvbi5sb2FkaW5nfVxuICA8cD5OdXJzZSBMb2dpbjwvcD5cbiAgPHRhYmxlPlxuICAgIDx0Ym9keT5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlJlZ2lzdGVyIG5ldyB1c2VyID88L3RkPlxuICAgICAgICA8dGQ+PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXtyZWdpc3Rlcn0+PC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICB7I2lmIHJlZ2lzdGVyfVxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+RnVsbCBOYW1lOjwvdGQ+XG4gICAgICAgIDx0ZD48aW5wdXQgYmluZDp2YWx1ZT17bmFtZX0vPjwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgey9pZn1cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPkxvZ2luIElEOjwvdGQ+XG4gICAgICAgIDx0ZD48aW5wdXQgYmluZDp2YWx1ZT17dXNlcm5hbWV9Lz48L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlBhc3N3b3JkOjwvdGQ+XG4gICAgICAgIDx0ZD48aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgYmluZDp2YWx1ZT17cGFzc3dvcmR9IGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlYWRvbmx5IG9uZm9jdXM9XCJ0aGlzLnJlbW92ZUF0dHJpYnV0ZSgncmVhZG9ubHknKTtcIiBzdHlsZT1cInRleHQtc2VjdXJpdHk6ZGlzYzsgLXdlYmtpdC10ZXh0LXNlY3VyaXR5OmRpc2M7XCIvPjwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgeyNpZiByZWdpc3Rlcn1cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlZlcmlmeSBQYXNzd29yZDo8L3RkPlxuICAgICAgICA8dGQ+PGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGJpbmQ6dmFsdWU9e3ZlcmlmeX0gb246Y2hhbmdlPXt2ZXJpZnlQYXNzd29yZH0gYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVhZG9ubHkgb25mb2N1cz1cInRoaXMucmVtb3ZlQXR0cmlidXRlKCdyZWFkb25seScpO1wiIHN0eWxlPVwidGV4dC1zZWN1cml0eTpkaXNjOyAtd2Via2l0LXRleHQtc2VjdXJpdHk6ZGlzYztcIi8+PC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICB7L2lmfVxuICAgICAgeyNpZiBlcnJvcn1cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPjwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzcz1cImVycm9yXCI+e2Vycm9yfTwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgey9pZn1cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPjwvdGQ+XG4gICAgICAgIDx0ZD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkaXNhYmxlZD17IXVzZXJuYW1lfSBvbjpjbGljaz17b25DbGlja30+e3JlZ2lzdGVyPyBcInJlZ2lzdGVyXCIgOiBcImxvZ2luXCJ9IDwvYnV0dG9uPjwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvdGJvZHk+XG4gIDwvdGFibGU+ICBcbnsvaWZ9XG48L2Zvcm0+XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgaGVhbHRoTm90ZVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgZGl2IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUxLCAyNTIsIDIwNik7XG4gICAgcGFkZGluZzogNXB4O1xuICAgIG1hcmdpbjogNXB4O1xuICB9XG4gIHRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICB0ZCB7XG4gICAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0ZXh0LXRvcDtcbiAgfVxuPC9zdHlsZT5cblxuPGRpdj5cbiAgPHRhYmxlPlxuICAgIDx0cj5cbiAgICAgIDx0ZD5IZWFsdGggTm90ZTo8L3RkPlxuICAgICAgPHRkPntoZWFsdGhOb3RlLm5vdGV9PC90ZD5cbiAgICA8L3RyPlxuICAgIDx0cj5cbiAgICAgIDx0ZD5OdXJzZSBJRDo8L3RkPlxuICAgICAgPHRkPntoZWFsdGhOb3RlLnVzZXJpZH08L3RkPlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgPHRkPkRhdGU6PC90ZD5cbiAgICAgIDx0ZD57bmV3IERhdGUoaGVhbHRoTm90ZS5jcmVhdGVkKX08L3RkPlxuICAgIDwvdHI+XG4gIDwvdGFibGU+XG48L2Rpdj5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJ1xuICBcbiAgY29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKVxuICBleHBvcnQgbGV0IHBhdGllbnRcbiAgZXhwb3J0IGxldCBvblVwZGF0ZWRcbiAgbGV0IG5vdGUgPSBcIlwiXG4gIGxldCBlcnJvclxuICBsZXQgbG9hZGluZyA9IGZhbHNlXG5cbiAgYXN5bmMgZnVuY3Rpb24gb25TYXZlKCkge1xuICAgIGxvYWRpbmcgPSB0cnVlXG4gICAgaWYgKG5vdGUubGVuZ3RoID09IDApIHtcbiAgICAgIGVycm9yID0gXCJoZWFsdGggbm90ZSBtdXN0IG5vdCBiZSBlbXB0eVwiXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIG5ld05vdGUgPSB7XG4gICAgICB1c2VyaWQ6ICRzZXNzaW9uLnByb2ZpbGUudXNlcm5hbWUsXG4gICAgICBwYXRpZW50aWQ6IHBhdGllbnQucGF0aWVudGlkLFxuICAgICAgbm90ZTogbm90ZVxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3BhdGllbnQvbm90ZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG5ld05vdGUpXG4gICAgfSlcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIGVycm9yID0gbnVsbFxuICAgICAgbm90ZSA9IFwiXCJcbiAgICAgIGlmIChvblVwZGF0ZWQgIT0gbnVsbCkgb25VcGRhdGVkKClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBlcnJvciA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKVxuICAgIH1cbiAgICBsb2FkaW5nID0gZmFsc2VcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgZGl2IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQxLCAyNDEsIDI0MCk7XG4gICAgcGFkZGluZzogNXB4O1xuICAgIG1hcmdpbjogNXB4O1xuICB9XG5cdHRleHRhcmVhIHsgd2lkdGg6IDk1JTsgaGVpZ2h0OiAyMDBweDsgfVxuPC9zdHlsZT5cblxueyNpZiAkc2Vzc2lvbiAmJiAkc2Vzc2lvbi5hdXRoZW50aWNhdGVkfVxuICA8ZGl2PlxuICBBZGQgbmV3IG5vdGU6PGJyLz5cbiAgcGF0aWVudCA6IHtwYXRpZW50Lm5hbWV9ICh7cGF0aWVudC5wYXRpZW50aWR9KTxici8+XG4gIDx0ZXh0YXJlYSBiaW5kOnZhbHVlPXtub3RlfT48L3RleHRhcmVhPjxici8+XG4gIGJ5IDogeyRzZXNzaW9uLnByb2ZpbGUubmFtZX0gKHskc2Vzc2lvbi5wcm9maWxlLnVzZXJuYW1lfSk8YnIvPlxuICA8YnV0dG9uIGRpc2FibGVkPXtsb2FkaW5nfSBvbjpjbGljaz17b25TYXZlfT5zYXZlPC9idXR0b24+XG4gIDwvZGl2Plxuey9pZn1cbnsjaWYgZXJyb3J9XG4gIHtlcnJvcn1cbnsvaWZ9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0MsSUFBSSxlQUFDLENBQUMsQUFDTCxRQUFRLENBQUUsUUFBUSxDQUNsQixTQUFTLENBQUUsSUFBSSxDQUNmLGdCQUFnQixDQUFFLEtBQUssQ0FDdkIsT0FBTyxDQUFFLEdBQUcsQ0FDWixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FDZCxVQUFVLENBQUUsVUFBVSxBQUN2QixDQUFDO0FDTkQsZ0JBQUUsQ0FBRSxDQUFDLGNBQUMsQ0FBQyxBQUNOLE1BQU0sQ0FBRSxDQUFDLENBQUMsSUFBSSxBQUNmLENBQUMsQUFFRCxFQUFFLGNBQUMsQ0FBQyxBQUNILFNBQVMsQ0FBRSxLQUFLLENBQ2hCLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQ3BCLENBQUMsQUFFRCxDQUFDLGNBQUMsQ0FBQyxBQUNGLE1BQU0sQ0FBRSxHQUFHLENBQUMsSUFBSSxBQUNqQixDQUFDLEFBRUQsTUFBTSxBQUFDLFlBQVksS0FBSyxDQUFDLEFBQUMsQ0FBQyxBQUMxQixFQUFFLGNBQUMsQ0FBQyxBQUNILFNBQVMsQ0FBRSxHQUFHLEFBQ2YsQ0FBQyxBQUNGLENBQUM7QUNoQkEsT0FBTyxjQUFDLENBQUMsQUFDUCxNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsTUFBTSxBQUN6QixDQUFDO0FDcUNGLEdBQUcsY0FBQyxDQUFDLEFBQ0osYUFBYSxDQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDM0MsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsT0FBTyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQ1osT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsYUFBYSxBQUNqQyxDQUFDLEFBRUQsRUFBRSxjQUFDLENBQUMsQUFDSCxNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLEFBQ1gsQ0FBQyxBQUdELGdCQUFFLE9BQU8sQUFBQyxDQUFDLEFBQ1YsT0FBTyxDQUFFLEVBQUUsQ0FDWCxPQUFPLENBQUUsS0FBSyxDQUNkLEtBQUssQ0FBRSxJQUFJLEFBQ1osQ0FBQyxBQUVELEVBQUUsY0FBQyxDQUFDLEFBQ0gsT0FBTyxDQUFFLEtBQUssQ0FDZCxLQUFLLENBQUUsSUFBSSxBQUNaLENBQUMsQUFFRCxDQUFDLFlBQVksQ0FBQyxjQUFDLENBQUMsQUFDZixRQUFRLENBQUUsUUFBUSxDQUNsQixPQUFPLENBQUUsWUFBWSxBQUN0QixDQUFDLEFBRUQsQ0FBQyxZQUFZLGVBQUMsT0FBTyxBQUFDLENBQUMsQUFDdEIsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLEVBQUUsQ0FDWCxLQUFLLENBQUUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUN2QixNQUFNLENBQUUsR0FBRyxDQUNYLGdCQUFnQixDQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDL0IsT0FBTyxDQUFFLEtBQUssQ0FDZCxNQUFNLENBQUUsSUFBSSxBQUNiLENBQUMsQUFFRCxDQUFDLGNBQUMsQ0FBQyxBQUNGLGVBQWUsQ0FBRSxJQUFJLENBQ3JCLE9BQU8sQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUNsQixPQUFPLENBQUUsS0FBSyxBQUNmLENBQUM7QUNyRkEsR0FBRyxjQUFDLENBQUMsQUFDSCxnQkFBZ0IsQ0FBRSxVQUFVLENBQzVCLE9BQU8sQ0FBRSxHQUFHLENBQ1osTUFBTSxDQUFFLEdBQUcsQ0FDWCxNQUFNLENBQUUsT0FBTyxBQUNqQixDQUFDLEFBQ0QsRUFBRSxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsR0FBRyxDQUNYLE9BQU8sQ0FBRSxHQUFHLEFBQ2QsQ0FBQztBQzhERCxPQUFPLDRCQUFDLENBQUMsQUFDUCxNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLElBQUksQ0FDYixlQUFlLENBQUUsTUFBTSxBQUN6QixDQUFDLEFBRUQsTUFBTSxDQUFDLGdCQUFFLENBQUMsRUFBRSxjQUFDLENBQUMsQUFDWixVQUFVLENBQUUsS0FBSyxBQUNuQixDQUFDO0FDdEZELEdBQUcsZUFBQyxDQUFDLEFBQ0gsZ0JBQWdCLENBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FDcEMsT0FBTyxDQUFFLEdBQUcsQ0FDWixNQUFNLENBQUUsR0FBRyxBQUNiLENBQUMsQUFDRCxLQUFLLGVBQUMsQ0FBQyxBQUNMLEtBQUssQ0FBRSxJQUFJLEFBQ2IsQ0FBQyxBQUNELEVBQUUsZUFBQyxDQUFDLEFBQ0YsV0FBVyxDQUFFLFFBQVEsQ0FDckIsY0FBYyxDQUFFLFFBQVEsQUFDMUIsQ0FBQztBQzJCRCxHQUFHLGNBQUMsQ0FBQyxBQUNILGdCQUFnQixDQUFFLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3BDLE9BQU8sQ0FBRSxHQUFHLENBQ1osTUFBTSxDQUFFLEdBQUcsQUFDYixDQUFDLEFBQ0YsUUFBUSxjQUFDLENBQUMsQUFBQyxLQUFLLENBQUUsR0FBRyxDQUFFLE1BQU0sQ0FBRSxLQUFLLEFBQUUsQ0FBQyJ9 */